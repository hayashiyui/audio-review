---
import BlogCard from '@/components/BlogCard.astro'
import ReviewsCard from '@/components/ReviewsCard.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PageHead from '@/components/PageHead.astro'
import Layout from '@/layouts/Layout.astro'
import { getEntriesByTag } from '@/lib/data-utils'

export async function getStaticPaths() {
  // Reuse ja tags, but pages will filter to en entries at render time
  const tags = new Set<string>()
  const entries = await Promise.all(['reviews', 'columns'] as const)
  // We cannot easily scan without getCollection, so use existing tag index via ja pages at runtime
  // Instead, create a minimal path based on runtime; fallback to on-demand generation isn't available for SSG
  // Safer approach: derive from all entries
  const { getAllReviews, getAllColumns } = await import('@/lib/data-utils')
  const allReviews = await getAllReviews()
  const allColumns = await getAllColumns()
  for (const r of allReviews) r.data.tags?.forEach((t) => tags.add(t))
  for (const c of allColumns) c.data.tags?.forEach((t) => tags.add(t))

  return Array.from(tags).map((tag) => ({
    params: { id: tag },
    props: { tag },
  }))
}

const { tag } = Astro.props
const entries = await getEntriesByTag(tag)
const columns = entries.columns.filter((c) => (c.data.locale ?? 'ja') === 'en')
const reviews = entries.reviews.filter((r) => (r.data.locale ?? 'ja') === 'en')
---

<Layout class="max-w-6xl ml-2" lang="en-US">
  <PageHead
    slot="head"
    title={`Posts tagged with "${tag}"`}
    description={`A collection of posts tagged with ${tag}.`}
    lang="en-US"
  />
  <div data-pagefind-ignore="all">
    <Breadcrumbs
      items={[
        { href: '/en/tags', label: 'Tags', icon: 'lucide:tags' },
        { label: tag, icon: 'lucide:tag' },
      ]}
    />

    {columns.length > 0 && (
      <section class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Columns ({columns.length})</h2>
        <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {columns.map((column) => (
            <li>
              <BlogCard entry={column} />
            </li>
          ))}
        </ul>
      </section>
    )}

    {reviews.length > 0 && (
      <section class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Reviews ({reviews.length})</h2>
        <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {reviews.map((review) => (
            <li>
              <ReviewsCard entry={review} />
            </li>
          ))}
        </ul>
      </section>
    )}
  </div>
</Layout>

