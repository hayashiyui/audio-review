---
import BlogCard from '@/components/BlogCard.astro'
import ReviewsCard from '@/components/ReviewsCard.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PageHead from '@/components/PageHead.astro'
import Layout from '@/layouts/Layout.astro'
import { getAllReviews, getAllColumns, getAllPosts, getEntriesByTag } from '@/lib/data-utils'

export async function getStaticPaths() {
  // JA のみのタグ一覧を作成
  const reviews = (await getAllReviews()).filter((r) => (r.data.locale ?? 'ja') === 'ja')
  const columns = (await getAllColumns()).filter((c) => (c.data.locale ?? 'ja') === 'ja')
  const blogs = await getAllPosts()
  const tagSet = new Set<string>()
  for (const r of reviews) r.data.tags?.forEach((t) => tagSet.add(t))
  for (const c of columns) c.data.tags?.forEach((t) => tagSet.add(t))
  for (const b of blogs) b.data.tags?.forEach((t) => tagSet.add(t))

  const uniqueTags = Array.from(tagSet)

  return Promise.all(
    uniqueTags.map(async (tag) => {
      const entries = await getEntriesByTag(tag)
      return {
        params: { id: tag },
        props: {
          tag,
          entries,
        },
      }
    }),
  )
}

const { tag, entries } = Astro.props
const filtered = {
  blogs: entries.blogs,
  reviews: entries.reviews.filter((r) => (r.data.locale ?? 'ja') === 'ja'),
  columns: entries.columns.filter((c) => (c.data.locale ?? 'ja') === 'ja'),
}
---

<Layout class="max-w-6xl ml-2">
  <PageHead
    slot="head"
    title={`Posts tagged with "${tag}"`}
    description={`A collection of posts tagged with ${tag}.`}
  />
  <div data-pagefind-ignore="all">
    <Breadcrumbs
      items={[
        { href: '/tags', label: 'Tags', icon: 'lucide:tags' },
        { label: tag, icon: 'lucide:tag' },
      ]}
    />

    {/* タグ名ヘッダー */}
    <header class="mb-2">
      <h1 class="text-3xl font-bold mb-2">#{tag}</h1>
    </header>

    {/* Columns セクション */}
    {filtered.columns.length > 0 && (
      <section class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Columns ({filtered.columns.length})</h2>
        <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filtered.columns.map((column) => (
            <li>
              <BlogCard entry={column} />
            </li>
          ))}
        </ul>
      </section>
    )}

    {/* Reviews セクション */}
    {filtered.reviews.length > 0 && (
      <section class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Reviews ({filtered.reviews.length})</h2>
        <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filtered.reviews.map((review) => (
            <li>
              <ReviewsCard entry={review} />
            </li>
          ))}
        </ul>
      </section>
    )}

    {/* Blog セクション */}
    {filtered.blogs.length > 0 && (
      <section class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Blog ({filtered.blogs.length})</h2>
        <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filtered.blogs.map((blog) => (
            <li>
              <BlogCard entry={blog} />
            </li>
          ))}
        </ul>
      </section>
    )}
  </div>
</Layout>
