---
import AvatarComponent from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import {
  getCombinedReadingTime,
  getColumnReadingTime,
  getReviewReadingTime,
  getSubpostCount,
  isSubpost,
  parseAuthors,
} from '@/lib/data-utils'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Picture } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import Link from './Link.astro'

interface Props {
  entry: CollectionEntry<'blog'> | CollectionEntry<'columns'> | CollectionEntry<'reviews'>
}

const { entry } = Astro.props
const formattedDate = formatDate(entry.data.date)

// コレクション種別に応じた読書時間計算
let readTime: string
if (entry.collection === 'columns') {
  readTime = await getColumnReadingTime(entry.id)
} else if (entry.collection === 'reviews') {
  readTime = await getReviewReadingTime(entry.id)
} else {
  readTime = await getCombinedReadingTime(entry.id)
}

const authors = entry.collection === 'blog' ? await parseAuthors(entry.data.authors ?? []) : []
const subpostCount = !isSubpost(entry.id) && entry.collection === 'blog' ? await getSubpostCount(entry.id) : 0
---

<div
  class="hover:bg-secondary/50 rounded-xl border p-2 sm:p-4 transition-colors duration-300 ease-in-out"
>
  <!-- モバイル用コンパクトレイアウト -->
  <div class="block sm:hidden">
    <!-- 1行目: タイトル + サムネイル -->
    <div class="flex items-start justify-between gap-2 mb-1">
      <Link href={`/${entry.collection}/${entry.id}`} class="flex-1 no-underline hover:underline">
        <h3 class="text-base font-medium leading-tight line-clamp-3">{entry.data.title}</h3>
        <p class="text-muted-foreground text-xs mt-0.5 line-clamp-1">{entry.data.description}</p>
      </Link>
      
      {
        ((entry.collection === 'blog' && entry.data.image) || 
         ((entry.collection === 'columns' || entry.collection === 'reviews') && entry.data.heroImage)) && (
          <Link href={`/${entry.collection}/${entry.id}`} class="shrink-0">
            <Picture
              src={entry.collection === 'blog' ? entry.data.image! : entry.data.heroImage!}
              alt={entry.data.title}
              width={85}
              height={48}
              densities={[1.5, 2]}
              formats={['avif', 'webp']}
              sizes="85px"
              loading="lazy"
              decoding="async"
              class="h-12 aspect-video rounded object-cover hover:opacity-80 transition-opacity"
            />
          </Link>
        )
      }
    </div>
    
    <!-- 2行目: 日付、読書時間、タグ -->
    <div class="text-muted-foreground text-xs flex flex-wrap items-center gap-x-1.5 gap-y-0.5">
      <span>{formattedDate}</span>
      <Separator orientation="vertical" className="h-3!" />
      <span>{readTime}</span>
      
      {
        subpostCount > 0 && (
          <>
            <Separator orientation="vertical" className="h-3!" />
            <span class="flex items-center gap-1">
              <Icon name="lucide:file-text" class="size-2.5" />
              {subpostCount}
            </span>
          </>
        )
      }
      
      {((entry.collection === 'reviews' || entry.collection === 'columns') && entry.data.category) && (
        <>
          <Separator orientation="vertical" className="h-3!" />
          <Link href={`/${entry.collection}/category/${entry.data.category}`} class="flex items-center gap-1 no-underline hover:underline">
            <Icon name="lucide:folder" class="size-2.5" />
            {entry.data.category}
          </Link>
        </>
      )}
      
      {
        entry.data.tags && entry.data.tags.length > 0 && (
          <>
            <Separator orientation="vertical" className="h-3!" />
            <div class="flex flex-wrap gap-0.5">
              {entry.data.tags.slice(0, 2).map((tag) => (
                <Link href={`/tags/${tag}`} class="no-underline">
                  <Badge variant="secondary" className="text-xs px-1 py-0.5 h-auto hover:bg-secondary/80 transition-colors">
                    #{tag}
                  </Badge>
                </Link>
              ))}
              {entry.data.tags.length > 2 && (
                <span class="text-muted-foreground">+{entry.data.tags.length - 2}</span>
              )}
            </div>
          </>
        )
      }
    </div>
  </div>

  <!-- PC用レイアウト（従来通り） -->
  <div class="hidden sm:flex sm:flex-col sm:gap-4">
    {
      ((entry.collection === 'blog' && entry.data.image) || 
       ((entry.collection === 'columns' || entry.collection === 'reviews') && entry.data.heroImage)) && (
        <Link href={`/${entry.collection}/${entry.id}`} class="sm:shrink-0">
          <Picture
            src={entry.collection === 'blog' ? entry.data.image! : entry.data.heroImage!}
            alt={entry.data.title}
            width={400}
            height={225}
            densities={[1.5, 2]}
            formats={['avif', 'webp']}
            sizes="(min-width: 640px) 400px, 90vw"
            loading="lazy"
            decoding="async"
            class="aspect-video rounded-lg object-cover hover:opacity-80 transition-opacity"
          />
        </Link>
      )
    }

    <div class="grow">
      <Link href={`/${entry.collection}/${entry.id}`} class="block no-underline hover:underline">
        <h3 class="mb-1 text-lg font-medium">{entry.data.title}</h3>
      </Link>
      <p class="text-muted-foreground mb-2 text-sm">{entry.data.description}</p>

      <div
        class="text-muted-foreground mb-2 flex flex-wrap items-center gap-x-2 text-xs"
      >
        {
          authors.length > 0 && (
            <>
              {authors.map((author) => (
                <div class="flex items-center gap-x-1.5">
                  <AvatarComponent
                    client:load
                    src={author.avatar}
                    alt={author.name}
                    fallback={author.name[0]}
                    className="size-5 rounded-full"
                  />
                  <span>{author.name}</span>
                </div>
              ))}
              <Separator orientation="vertical" className="h-4!" />
            </>
          )
        }
        <span>{formattedDate}</span>
        <Separator orientation="vertical" className="h-4!" />
        <span>{readTime}</span>
        {
          subpostCount > 0 && (
            <>
              <Separator orientation="vertical" className="h-4!" />
              <span class="flex items-center gap-1">
                <Icon name="lucide:file-text" class="size-3" />
                {subpostCount} subpost{subpostCount === 1 ? '' : 's'}
              </span>
            </>
          )
        }
        {((entry.collection === 'reviews' || entry.collection === 'columns') && entry.data.category) && (
          <>
            <Separator orientation="vertical" className="h-4!" />
            <Link href={`/${entry.collection}/category/${entry.data.category}`} class="flex items-center gap-1 no-underline hover:underline">
              <Icon name="lucide:folder" class="size-3" />
              {entry.data.category}
            </Link>
          </>
        )}
      </div>

      {
        entry.data.tags && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag) => (
              <Link href={`/tags/${tag}`} class="no-underline">
                <Badge variant="secondary" className="flex items-center gap-x-1 hover:bg-secondary/80 transition-colors">
                  <Icon name="lucide:hash" class="size-3" />
                  {tag}
                </Badge>
              </Link>
            ))}
          </div>
        )
      }
    </div>
  </div>
</div>
