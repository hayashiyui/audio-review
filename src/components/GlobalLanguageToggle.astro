---
import { Icon } from 'astro-icon/components'

// 現在のパスから言語を判定
const currentPath = Astro.url.pathname
const isEn = currentPath.startsWith('/en/')
const currentLocale = isEn ? 'en' : 'ja'
const targetLocale = isEn ? 'ja' : 'en'

// URLパスを変換（単純なトップページ間の切り替え）
const toggleUrl = isEn ? '/' : '/en/'
const currentLabel = currentLocale === 'ja' ? '日本語' : 'English'
const targetLabel = targetLocale === 'en' ? 'English' : '日本語'
---

<div class="relative" data-global-language-menu>
  <button
    type="button"
    class="inline-flex items-center gap-1.5 rounded-md border border-border/50 bg-background/50 px-2.5 py-1.5 text-sm font-medium text-foreground/70 transition-colors hover:bg-background hover:text-foreground hover:border-border"
    aria-label="言語を選択"
    aria-expanded="false"
  >
    <Icon name="lucide:globe" class="size-3.5" />
    <span class="text-xs font-medium sm:hidden">
      {currentLocale === 'ja' ? '日' : currentLabel}
    </span>
    <span class="hidden text-xs font-medium sm:inline">
      {currentLabel}
    </span>
    <Icon name="lucide:chevron-down" class="size-3" />
  </button>

  <div class="absolute right-0 z-10 mt-2 hidden min-w-[120px] rounded-md border border-border bg-background shadow-lg" data-global-language-dropdown>
    <a
      href={toggleUrl}
      class="flex items-center gap-2 px-3 py-2 text-sm text-foreground hover:bg-muted"
    >
      {targetLabel}
    </a>
  </div>
</div>

<script>
  // Store handlers using WeakMap to avoid TypeScript errors
  const buttonHandlers = new WeakMap()
  let outsideClickHandler: (() => void) | null = null

  function initGlobalLanguageToggle() {
    const menus = document.querySelectorAll('[data-global-language-menu]')

    menus.forEach(menu => {
      const button = menu.querySelector('button')
      const dropdown = menu.querySelector('[data-global-language-dropdown]')

      if (button && dropdown) {
        // Remove existing listeners to prevent duplicates
        const existingHandler = buttonHandlers.get(button)
        if (existingHandler) {
          button.removeEventListener('click', existingHandler)
        }

        const clickHandler = (e: Event) => {
          e.stopPropagation()
          const isOpen = dropdown.classList.contains('hidden')

          // Close all language menus
          document.querySelectorAll('[data-global-language-dropdown], [data-language-dropdown]').forEach(d => {
            d.classList.add('hidden')
          })
          document.querySelectorAll('[data-global-language-menu] button, [data-language-menu] button').forEach(b => {
            b.setAttribute('aria-expanded', 'false')
          })

          if (isOpen) {
            dropdown.classList.remove('hidden')
            button.setAttribute('aria-expanded', 'true')
          } else {
            dropdown.classList.add('hidden')
            button.setAttribute('aria-expanded', 'false')
          }
        }

        buttonHandlers.set(button, clickHandler)
        button.addEventListener('click', clickHandler)
      }
    })

    // Click outside to close
    const newOutsideClickHandler = () => {
      document.querySelectorAll('[data-global-language-dropdown]').forEach(dropdown => {
        dropdown.classList.add('hidden')
      })
      document.querySelectorAll('[data-global-language-menu] button').forEach(button => {
        button.setAttribute('aria-expanded', 'false')
      })
    }

    // Remove existing listener to prevent duplicates
    if (outsideClickHandler) {
      document.removeEventListener('click', outsideClickHandler)
    }
    outsideClickHandler = newOutsideClickHandler
    document.addEventListener('click', outsideClickHandler)
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initGlobalLanguageToggle)

  // Re-initialize after view transitions (for Astro View Transitions)
  document.addEventListener('astro:after-swap', initGlobalLanguageToggle)
</script>