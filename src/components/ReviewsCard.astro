---
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Picture } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import Link from './Link.astro'

interface Props {
  entry: CollectionEntry<'reviews'>
}

const { entry } = Astro.props
const formattedDate = formatDate(entry.data.date)
---

<div
  class="hover:bg-secondary/50 rounded-xl border p-2 sm:p-4 transition-colors duration-300 ease-in-out"
>
  <!-- モバイル用コンパクトレイアウト -->
  <div class="block sm:hidden">
    <!-- 1行目: タイトル + サムネイル -->
    <div class="flex items-start justify-between gap-2 mb-1">
      <Link href={`/reviews/${entry.id}`} class="flex-1 no-underline hover:underline">
        <h3 class="text-base font-medium leading-tight line-clamp-3">{entry.data.title}</h3>
      </Link>
      
      {
        entry.data.heroImage && (
          <Link href={`/reviews/${entry.id}`} class="shrink-0">
            <Picture
              src={entry.data.heroImage}
              alt={entry.data.title}
              width={85}
              height={48}
              densities={[1.5, 2]}
              formats={['avif', 'webp']}
              sizes="85px"
              loading="lazy"
              decoding="async"
              class="h-12 aspect-video rounded object-cover hover:opacity-80 transition-opacity"
            />
          </Link>
        )
      }
    </div>
    
    <!-- 2行目: 日付、カテゴリ、タグ -->
    <div class="text-muted-foreground text-xs flex flex-wrap items-center gap-x-1.5 gap-y-0.5">
      <span>{formattedDate}</span>
      
      {entry.data.category && (
        <>
          <Separator orientation="vertical" className="h-3!" />
          <span class="flex items-center gap-1">
            <Icon name="lucide:folder" class="size-2.5" />
            {entry.data.category}
          </span>
        </>
      )}
      
      {
        entry.data.tags && entry.data.tags.length > 0 && (
          <>
            <Separator orientation="vertical" className="h-3!" />
            <div class="flex flex-wrap gap-0.5">
              {entry.data.tags.slice(0, 2).map((tag) => (
                <Link href={`/tags/${tag}`} class="no-underline">
                  <Badge variant="secondary" className="text-xs px-1 py-0.5 h-auto hover:bg-secondary/80 transition-colors">
                    #{tag}
                  </Badge>
                </Link>
              ))}
              {entry.data.tags.length > 2 && (
                <span class="text-muted-foreground">+{entry.data.tags.length - 2}</span>
              )}
            </div>
          </>
        )
      }
    </div>
  </div>

  <!-- PC用レイアウト（グリッド対応縦型） -->
  <div class="hidden sm:flex sm:flex-col sm:gap-3">
    {
      entry.data.heroImage && (
        <Link href={`/reviews/${entry.id}`} class="block">
          <Picture
            src={entry.data.heroImage}
            alt={entry.data.title}
            width={400}
            height={225}
            densities={[1.5, 2]}
            formats={['avif', 'webp']}
            sizes="(min-width: 1024px) 33vw, (min-width: 768px) 50vw, 100vw"
            loading="lazy"
            decoding="async"
            class="w-full rounded-lg object-cover aspect-video hover:opacity-80 transition-opacity"
          />
        </Link>
      )
    }

    <div class="grow">
      <Link href={`/reviews/${entry.id}`} class="block no-underline hover:underline">
        <h3 class="mb-1 text-lg font-medium">{entry.data.title}</h3>
      </Link>
      
      {entry.data.brand && entry.data.model && (
        <p class="text-muted-foreground mb-2 text-sm">
          {entry.data.brand} {entry.data.model}
        </p>
      )}

      <div
        class="text-muted-foreground mb-2 flex flex-wrap items-center gap-x-2 text-xs"
      >
        <span>{formattedDate}</span>
        
        {entry.data.category && (
          <>
            <Separator orientation="vertical" className="h-4!" />
            <span class="flex items-center gap-1">
              <Icon name="lucide:folder" class="size-3" />
              {entry.data.category}
            </span>
          </>
        )}
      </div>

      {
        entry.data.tags && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag) => (
              <Link href={`/tags/${tag}`} class="no-underline">
                <Badge variant="secondary" className="flex items-center gap-x-1 hover:bg-secondary/80 transition-colors">
                  <Icon name="lucide:hash" class="size-3" />
                  {tag}
                </Badge>
              </Link>
            ))}
          </div>
        )
      }
    </div>
  </div>
</div>