---
import { SITE } from '@/consts'
import { isSubpost, parseAuthors } from '@/lib/data-utils'
import { generateBlogPostingSchema, generateReviewSchema, generateArticleSchema } from '@/lib/structured-data'
import { getImage } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import defaultOgImage from '@/assets/images/default-og.png'

interface Props {
  post: CollectionEntry<'blog'> | CollectionEntry<'reviews'> | CollectionEntry<'columns'>
}

const { post } = Astro.props

const title = post.data.title || SITE.title
const description = post.data.description || SITE.description
const author = post.collection === 'blog' && post.data.authors && post.data.authors.length > 0
  ? post.data.authors.join(', ')
  : SITE.author

// 最適化画像のURL取得
let optimizedImageUrl: URL
try {
  let sourceImage = defaultOgImage
  
  if (post.collection === 'blog' && post.data.image) {
    sourceImage = post.data.image
  } else if ((post.collection === 'reviews' || post.collection === 'columns') && post.data.heroImage) {
    sourceImage = post.data.heroImage
  }
  
  const optimizedImage = await getImage({
    src: sourceImage,
    width: 1200,
    height: 630,
    format: 'webp'
  })
  optimizedImageUrl = new URL(optimizedImage.src, Astro.site)
} catch (error) {
  console.warn('画像最適化に失敗しました:', error)
  // フォールバック
  optimizedImageUrl = new URL('/static/1200x630.png', Astro.site)
}

// コレクション別の構造化データを生成
let structuredData: object | null = null
if (post.collection === 'blog') {
  const authors = await parseAuthors(post.data.authors ?? [])
  structuredData = generateBlogPostingSchema(post as CollectionEntry<'blog'>, authors)
} else if (post.collection === 'reviews') {
  structuredData = generateReviewSchema(post as CollectionEntry<'reviews'>)
} else if (post.collection === 'columns') {
  structuredData = generateArticleSchema(post as CollectionEntry<'columns'>)
}
---

<title>{`${title} | ${SITE.title}`}</title>
<meta name="title" content={`${title} | ${SITE.title}`} />
<meta name="description" content={description} />
<link rel="canonical" href={Astro.url} />

{isSubpost(post.id) && <meta name="robots" content="noindex" />}

<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={optimizedImageUrl} />
<meta property="og:image:alt" content={title} />
<meta property="og:type" content="website" />
<meta property="og:locale" content={SITE.locale} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:url" content={Astro.url} />
<meta property="og:author" content={author} />

{post.collection === 'reviews' && (
  <meta name="pagefind:filters" content="section=reviews" />
)}
{post.collection === 'columns' && (
  <meta name="pagefind:filters" content="section=columns" />
)}

<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta property="twitter:image" content={optimizedImageUrl} />
<meta name="twitter:image:alt" content={title} />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:creator" content={author} />

{
  post?.data.tags &&
    post.data.tags.map((tag: string) => {
      return <meta property="article:tag" content={tag} />
    })
}

<!-- 記事別の構造化データ -->
{structuredData && (
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} is:inline />
)}
